/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Karina
 */



import bmicalculator.General;
import bmicalculator.Pria;
import bmicalculator.Wanita;
import java.util.*;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextField;
import static javax.swing.text.html.HTML.Tag.SELECT;

/**
 * JFrame untuk menampilkan riwayat data BMI.
 * 
 * <p>
 * Kelas ini mengatur tampilan dan logika di balik menampilkan riwayat data BMI pada sebuah tabel.
 * Riwayat data diambil dari database dan ditampilkan dalam tabel dengan dua kolom:
 * Tanggal Cek dan Hasil BMI.
 * </p>
 * 
 * <p>
 * Kelas ini menggunakan koneksi database MySQL untuk mengambil data riwayat dari tabel data_history.
 * Riwayat data hanya ditampilkan untuk pengguna yang sedang masuk dengan username yang sesuai.
 * </p>
 * 
 * <p>
 * Kelas ini juga menggunakan kelas DefaultTableModel dari Swing untuk menampilkan data dalam tabel.
 * </p>
 * 
 * @author Karina
 */

public class History extends javax.swing.JFrame {

    /**
     * Creates new form History
     */
    
    public Statement stm;
    public Connection con;
    public PreparedStatement pst;
    public ResultSet rs = null;  
     /**
     * Konstruktor kelas History.
     * 
     * <p>
     * Memanggil metode DisplayHistory untuk menginisialisasi koneksi ke database.
     * Kemudian, mengatur tampilan tabel dan menampilkan riwayat data BMI pengguna yang sedang masuk.
     * </p>
     */

     public class DisplayHistory{
        public DisplayHistory(){
            try{
                final String DATABASE_URL = "jdbc:mysql://localhost:3306/projectkalmi"; 
                String user = "root";
                String pass = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                con = DriverManager.getConnection(DATABASE_URL, "root", "");
                stm = con.createStatement();
                
                
                
            }catch(ClassNotFoundException | SQLException e){
                JOptionPane.showMessageDialog(null, "Connection Gagal");
            }
           
        }
    }
    

 
    public History() {
        initComponents();
        new DisplayHistory();
         //setDefaultCloseOperation(History.DISPOSE_ON_CLOSE);
        tampilTabel();
   
        
    
      
    }
     /**
     * Metode untuk menampilkan riwayat data BMI pengguna dalam tabel.
     * 
     * <p>
     * Metode ini mengambil data riwayat dari tabel data_history menggunakan koneksi database.
     * Data kemudian ditampilkan dalam tabelHistory menggunakan DefaultTableModel.
     * </p>
     */
    
    public void tampilTabel(){
       try {
    // Query untuk mengambil data dari data_registrasi
    
     String sql = "select tanggal_cek, hasilbmi from data_history WHERE username = '" + Login.userName + "'";
    Statement stm = con.createStatement();
    ResultSet rs = stm.executeQuery(sql);

    // Bersihkan model sebelum menambahkan data baru
    DefaultTableModel model = (DefaultTableModel) tabelHistory.getModel();
    model.setRowCount(0);

    // Loop melalui hasil ResultSet dan tambahkan data ke dalam model
    while (rs.next()) {
        String tanggalCek = rs.getString("tanggal_cek");
        String hasilBmi = rs.getString("hasilbmi");
        
        model.addRow(new Object[]{tanggalCek, hasilBmi});
    }

    // Setel model ke tabelHistory
    tabelHistory.setModel(model);
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, e.getMessage());
}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelHistory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        tabelHistory.setBackground(new java.awt.Color(146, 173, 255));
        tabelHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tanggal Cek", "Hasil BMI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelHistory);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    
  
    /**
     * Metode main untuk menjalankan aplikasi.
     * 
     * <p>
     * Metode ini membuat instance dari kelas History dan menampilkannya.
     * </p>
     * 
     * @param args Argumen baris perintah yang diberikan saat menjalankan program.
     */
  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new History().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelHistory;
    // End of variables declaration//GEN-END:variables
}
